import { Heading, Label, LFOSlider, LevelSlider, ActivationSwitch } from "../ui/components.slint";
import { Theme } from "../ui/theme.slint";

export component DynamicsPanel inherits HorizontalLayout {

    callback compressor_activated(bool);
    callback compressor_threshold_changed(float);
    callback compressor_ratio_changed(float);
    callback wavefolder_activated(bool);
    callback wavefolder_threshold_changed(float);
    callback wavefolder_ratio_changed(float);
    callback limiter_activated(bool);
    callback limiter_threshold_changed(float);
    callback clipper_activated(bool);
    callback clipper_threshold_changed(float);

    Rectangle {
        border-width: Theme.window-border-width;
        border-color: Theme.border-colour;
        border-radius: Theme.border-radius;
        background: Theme.panel-box-background;

        VerticalLayout {
            alignment: start;
            spacing: 20px;
            padding: 10px;

            HorizontalLayout {
                alignment: center;
                spacing: 20px;

                VerticalLayout {
                    spacing: 10px;

                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.compressor-heading-text;
                    }

                    ActivationSwitch {
                        activated-text: Theme.activation-switch-active-text;
                        not-activated-text: Theme.activation-switch-not-active-text;

                        activation_toggled => {
                            compressor_threshold.enabled = self.activated;
                            compressor_ratio.enabled = self.activated;
                            compressor_activated(self.checked);
                        }
                    }

                    Label {
                        label: Theme.compressor-threshold-text + round(compressor_threshold.slider_value);
                    }

                    compressor_threshold := LFOSlider {
                        slider_value: Theme.compressor-threshold-default;
                        step: Theme.compressor-threshold-step;
                        minimum: Theme.compressor-threshold-minimum;
                        maximum: Theme.compressor-threshold-maximum;
                        enabled: false;
                        level_selected(level) => {
                            compressor_threshold_changed(round(level));
                        }
                    }

                    Label {
                        label: Theme.compressor-ratio-text + round(compressor_ratio.value) + Theme.compressor-ratio-suffix;
                    }

                    compressor_ratio := LevelSlider {
                        value: Theme.compressor-ratio-default;
                        step: Theme.compressor-ratio-step;
                        minimum: Theme.compressor-ratio-minimum;
                        maximum: Theme.compressor-ratio-maximum;
                        enabled: false;
                        level_selected(level) => {
                            compressor_ratio_changed(1 / round(level));
                        }
                    }
                }
            }
        }
    }

    Rectangle {
        border-width: Theme.window-border-width;
        border-color: Theme.border-colour;
        border-radius: Theme.border-radius;
        background: Theme.panel-box-background;
        VerticalLayout {
            alignment: start;
            spacing: 20px;
            padding: 10px;
            HorizontalLayout {
                alignment: center;
                spacing: 20px;
                VerticalLayout {
                    spacing: 10px;
                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.wavefolder-heading-text;
                    }

                    ActivationSwitch {
                        activated-text: Theme.activation-switch-active-text;
                        not-activated-text: Theme.activation-switch-not-active-text;
                        activation_toggled => {
                            wavefolder_threshold.enabled = self.activated;
                            wavefolder_ratio.enabled = self.activated;
                            wavefolder_activated(self.checked);
                        }
                    }

                    Label {
                        label: Theme.wavefolder-threshold-text + round(wavefolder_threshold.slider_value);
                    }

                    wavefolder_threshold := LFOSlider {
                        slider_value: Theme.wavefolder-threshold-default;
                        step: Theme.wavefolder-threshold-step;
                        minimum: Theme.wavefolder-threshold-minimum;
                        maximum: Theme.wavefolder-threshold-maximum;
                        enabled: false;
                        level_selected(level) => {
                            wavefolder_threshold_changed(round(level));
                        }
                    }

                    Label {
                        label: Theme.wavefolder-ratio-text + round(wavefolder_ratio.value) + Theme.wavefolder-ratio-suffix;
                    }

                    wavefolder_ratio := LevelSlider {
                        value: Theme.wavefolder-ratio-default;
                        step: Theme.wavefolder-ratio-step;
                        minimum: Theme.wavefolder-ratio-minimum;
                        maximum: Theme.wavefolder-ratio-maximum;
                        enabled: false;
                        level_selected(level) => {
                            wavefolder_ratio_changed(1 / round(level));
                        }
                    }
                }
            }
        }
    }

    Rectangle {
        border-width: Theme.window-border-width;
        border-color: Theme.border-colour;
        border-radius: Theme.border-radius;
        background: Theme.panel-box-background;
        VerticalLayout {
            alignment: start;
            spacing: 20px;
            padding: 10px;
            HorizontalLayout {
                alignment: center;
                spacing: 20px;

                VerticalLayout {
                    spacing: 10px;
                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.limiter-heading-text;
                    }

                    ActivationSwitch {
                        activated-text: Theme.activation-switch-active-text;
                        not-activated-text: Theme.activation-switch-not-active-text;
                        activation_toggled => {
                            limiter_threshold.enabled = self.activated;
                            limiter_activated(self.checked);
                        }
                    }

                    Label {
                        label: Theme.limiter-threshold-text + round(limiter_threshold.slider_value);
                    }

                    limiter_threshold := LFOSlider {
                        slider_value: Theme.limiter-threshold-default;
                        step: Theme.limiter-threshold-step;
                        minimum: Theme.limiter-threshold-minimum;
                        maximum: Theme.limiter-threshold-maximum;
                        enabled: false;
                        level_selected(level) => {
                            limiter_threshold_changed(round(level));
                        }
                    }
                }
            }
        }
    }

    Rectangle {
        border-width: Theme.window-border-width;
        border-color: Theme.border-colour;
        border-radius: Theme.border-radius;
        background: Theme.panel-box-background;
        VerticalLayout {
            alignment: start;
            spacing: 20px;
            padding: 10px;
            HorizontalLayout {
                alignment: center;
                spacing: 20px;
                VerticalLayout {
                    spacing: 10px;
                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.clipper-heading-text;
                    }

                    ActivationSwitch {
                        activated-text: Theme.activation-switch-active-text;
                        not-activated-text: Theme.activation-switch-not-active-text;
                        activation_toggled => {
                            clipper_threshold.enabled = self.activated;
                            clipper_activated(self.checked);
                        }
                    }

                    Label {
                        label: Theme.clipper-threshold-text + round(clipper_threshold.slider_value);
                    }

                    clipper_threshold := LFOSlider {
                        slider_value: Theme.clipper-threshold-default;
                        step: Theme.clipper-threshold-step;
                        minimum: Theme.clipper-threshold-minimum;
                        maximum: Theme.clipper-threshold-maximum;
                        enabled: false;
                        level_selected(level) => {
                            clipper_threshold_changed(round(level));
                        }
                    }
                }
            }
        }
    }
}
