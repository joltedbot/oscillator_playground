import { Button, Slider, Switch, SpinBox, HorizontalBox, TabWidget } from "std-widgets.slint";
import { Panel, Heading, Label, StartButton, WaveSelector, LevelSlider, OutputLevelSlider, ADSRSlider, FilterSlider, ActivationSwitch } from "../ui/components.slint";
import { Theme } from "../ui/theme.slint";
import { OscillatorPanel } from "../ui/oscillator-panel.slint";
import { OscillatorGlobalPanel } from "../ui/oscillator-global-panel.slint";
import { FilterPanel } from "../ui/filter-panel.slint";
import { EnvelopePanel } from "../ui/envelope-panel.slint";
import { EffectsPanel } from "../ui/effects-panel.slint";
import { ButtonsPanel } from "../ui/buttons-panel.slint";
import { ArpeggiatorPanel } from "../ui/arpeggiator-panel.slint";
import { SettingsPanel } from "../ui/settings-panel.slint";


export component AppWindow inherits Window {
    title: Theme.window-title;
    min-width: Theme.window-width;
    min-height: Theme.window-height;
    default-font-size: Theme.text-size;
    background: transparent;

    in-out property <bool> arp_button_active: false;
    in-out property <[string]> midi_input_ports;

    callback wave_shape_selected(string, int);
    callback wave_level_selected(float, int);
    callback wave_specific_parameter_selected(float, int);
    callback wave_shaper_amount_changed(float, int);
    callback wave_mod_speed_changed(float, int);
    callback wave_mod_amount_changed(float, int);
    callback wave_tuning_changed(int, int);

    callback wave_detune_value_changed(float);
    callback wave_detune_state_changed(bool, float);
    callback output_level_value_changed(int);
    callback output_level_constant_activated(bool);

    callback arp_button_pressed(bool);
    callback resync_oscillators();
    callback resync_oscillator_lfos();

    callback envelope_attack_updated(int);
    callback envelope_decay_updated(int);
    callback envelope_release_updated(int);
    callback envelope_sustain_updated(int);
    callback adsr_note_length_updated(int);
    callback filter_cutoff_value_changed(int);
    callback filter_resonance_value_changed(float);
    callback filter_mod_shape_selected(string);
    callback number_of_poles_selected(int);
    callback enable_amp_envelope(bool);
    callback gate_length_changed(int);
    callback gate_duty_cycle_changed(float);
    callback auto_pan_activated(bool);
    callback auto_pan_speed_changed(float);
    callback auto_pan_width_changed(float);
    callback tremolo_activated(bool);
    callback tremolo_speed_changed(float);
    callback tremolo_depth_changed(float);
    callback filter_mod_activated(bool);
    callback filter_mod_speed_changed(float);
    callback filter_mod_amount_changed(float);
    callback phaser_activated(bool);
    callback phaser_speed_changed(float);
    callback phaser_amount_changed(float);
    callback bitcrusher_activated(bool);
    callback bitcrusher_amount_changed(int);
    callback global_wave_shaper_activated(bool);
    callback global_wave_shaper_amount_changed(float);
    callback compressor_activated(bool);
    callback compressor_threshold_changed(float);
    callback compressor_ratio_changed(float);
    callback wavefolder_activated(bool);
    callback wavefolder_threshold_changed(float);
    callback wavefolder_ratio_changed(float);
    callback limiter_activated(bool);
    callback limiter_threshold_changed(float);
    callback clipper_activated(bool);
    callback clipper_threshold_changed(float);
    callback note_activated(int);
    callback note_deactivated(int);
    callback arpeggiator_random_activated(bool);
    callback midi_port_selected(int);
    callback midi_channel_selected(int);



    Rectangle {
        padding: 4px;
        border-width: Theme.window-border-width;
        background: Theme.window-background;
        border-color: Theme.border-colour;
        border-bottom-left-radius: Theme.border-radius;
        border-bottom-right-radius: Theme.border-radius;

        VerticalLayout {
            padding: 0px;
            spacing: 0px;

            Image {
                width: Theme.window-width;
                height: 50px;
                source: @image-url("../images/header.png");
            }

            TabWidget {
                Tab {
                    title: Theme.tab-synth-title;

                    HorizontalLayout {
                        alignment: center;
                        spacing: 10px;

                        VerticalLayout {
                            spacing: 5px;
                            padding: 5px;
                            alignment: start;

                            HorizontalLayout {
                                spacing: 5px;
                                alignment: start;

                                OscillatorPanel {

                                    wave_level_selected(level, oscillator) => {
                                        root.wave_level_selected(level, oscillator);
                                    }

                                    wave_specific_parameter_selected(amount, oscillator) => {
                                        root.wave_specific_parameter_selected(amount, oscillator);
                                    }

                                    wave_shape_selected(shape, oscillator) => {
                                        root.wave_shape_selected(shape, oscillator);
                                    }

                                    wave_tuning_changed(interval, oscillator) => {
                                        root.wave_tuning_changed(interval, oscillator);
                                    }

                                    wave_shaper_amount_changed(amount, oscillator) => {
                                        root.wave_shaper_amount_changed(amount, oscillator);
                                    }

                                    wave_mod_amount_changed(amount, oscillator) => {
                                        root.wave_mod_amount_changed(amount, oscillator);
                                    }
                                    wave_mod_speed_changed(speed_hz, oscillator) => {
                                        root.wave_mod_speed_changed(speed_hz, oscillator);
                                    }
                                }

                                VerticalLayout {

                                    EnvelopePanel {
                                        envelope_attack_updated(milliseconds) => {
                                            root.envelope_attack_updated(milliseconds);
                                        }

                                        envelope_decay_updated(milliseconds) => {
                                            root.envelope_decay_updated(milliseconds);
                                        }

                                        envelope_release_updated(milliseconds) => {
                                            root.envelope_release_updated(milliseconds);
                                        }

                                        envelope_sustain_updated(milliseconds) => {
                                            root.envelope_sustain_updated(milliseconds);
                                        }

                                        enable_amp_envelope(is_enabled) => {
                                            root.enable_amp_envelope(is_enabled);
                                        }

                                        gate_length_changed(note_length) => {
                                            root.gate_length_changed(note_length);
                                        }

                                        gate_duty_cycle_changed(duty_cycle) => {
                                            root.gate_duty_cycle_changed(duty_cycle);
                                        }
                                    }

                                    OscillatorGlobalPanel {
                                        wave_detune_value_changed(int) => {
                                            root.wave_detune_value_changed(int);
                                        }

                                        wave_detune_state_changed(active, amount) => {
                                            root.wave_detune_state_changed(active, amount)
                                        }

                                        output_level_value_changed(level) => {
                                            root.output_level_value_changed(level);
                                        }

                                        output_level_constant_activated(is_active) => {
                                            root.output_level_constant_activated(is_active);
                                        }
                                    }
                                }
                            }

                            HorizontalLayout {
                                spacing: 5px;
                                alignment: start;

                                FilterPanel {
                                    number_of_poles_selected(number_of_poles) => {
                                        root.number_of_poles_selected(number_of_poles);
                                    }

                                    filter_cutoff_value_changed(cutoff) => {
                                        root.filter_cutoff_value_changed(cutoff);
                                    }

                                    filter_resonance_value_changed(resonance) => {
                                        root.filter_resonance_value_changed(resonance);
                                    }

                                    filter_mod_activated(is_active) => {
                                        root.filter_mod_activated(is_active);
                                    }
                                    filter_mod_speed_changed(speed) => {
                                        root.filter_mod_speed_changed(speed);
                                    }
                                    filter_mod_amount_changed(amount) => {
                                        root.filter_mod_amount_changed(amount);
                                    }
                                    filter_mod_shape_selected(shape) => {
                                        root.filter_mod_shape_selected(shape);
                                    }
                                }

                                ButtonsPanel {

                                    arp_button_active: arp_button_active;

                                    arp_button_pressed(active) => {
                                        root.arp_button_pressed(active);
                                    }

                                    resync_oscillators() => {
                                        root.resync_oscillators();
                                    }

                                    resync_oscillator_lfos() => {
                                        root.resync_oscillator_lfos();
                                    }
                                }
                            }
                        }
                    }
                }

                Tab {
                    title: Theme.tab-effects-title;

                    VerticalLayout {
                        spacing: 5px;
                        alignment: start;

                        EffectsPanel {
                            phaser_activated(is_activated) => {
                                phaser_activated(is_activated);
                            }

                            phaser_speed_changed(speed_hz) => {
                                phaser_speed_changed(speed_hz);
                            }

                            phaser_amount_changed(amount) => {
                                phaser_amount_changed(amount);
                            }

                            bitcrusher_activated(is_activated) => {
                                root.bitcrusher_activated(is_activated);
                            }

                            bitcrusher_amount_changed(amount) => {
                                root.bitcrusher_amount_changed(amount);
                            }

                            wave_shaper_activated(is_activated) => {
                                root.global_wave_shaper_activated(is_activated);
                            }

                            wave_shaper_amount_changed(amount) => {
                                root.global_wave_shaper_amount_changed(amount);
                            }

                            auto_pan_activated(is_actived) => {
                                root.auto_pan_activated(is_actived);
                            }

                            auto_pan_speed_changed(speed_hz) => {
                                root.auto_pan_speed_changed(speed_hz);
                            }

                            auto_pan_width_changed(speed_hz) => {
                                root.auto_pan_width_changed(speed_hz);
                            }

                            tremolo_activated(is_actived) => {
                                root.tremolo_activated(is_actived);
                            }

                            tremolo_speed_changed(speed_hz) => {
                                root.tremolo_speed_changed(speed_hz);
                            }

                            tremolo_depth_changed(depth) => {
                                root.tremolo_depth_changed(depth);
                            }

                            compressor_activated(is_actived) => {
                                root.compressor_activated(is_actived);
                            }

                            compressor_threshold_changed(threshold) => {
                                root.compressor_threshold_changed(threshold);
                            }

                            compressor_ratio_changed(ratio) => {
                                root.compressor_ratio_changed(ratio);
                            }

                            wavefolder_activated(is_actived) => {
                                root.wavefolder_activated(is_actived);
                            }

                            wavefolder_threshold_changed(threshold) => {
                                root.wavefolder_threshold_changed(threshold);
                            }

                            wavefolder_ratio_changed(ratio) => {
                                root.wavefolder_ratio_changed(ratio);
                            }

                            limiter_activated(is_actived) => {
                                root.limiter_activated(is_actived);
                            }

                            limiter_threshold_changed(threshold) => {
                                root.limiter_threshold_changed(threshold);
                            }

                            clipper_activated(is_actived) => {
                                root.clipper_activated(is_actived);
                            }

                            clipper_threshold_changed(threshold) => {
                                root.clipper_threshold_changed(threshold);
                            }
                        }
                    }
                }

                Tab {
                    title: Theme.tab-arpeggiator-title;

                    ArpeggiatorPanel {

                        note_activated(note_number) => {
                            root.note_activated(note_number);
                        }

                        note_deactivated(note_number) => {
                            root.note_deactivated(note_number);
                        }

                        adsr_note_length_updated(milliseconds) => {
                            root.adsr_note_length_updated(milliseconds);
                        }

                        arpeggiator_random_activated(is_active) => {
                            root.arpeggiator_random_activated(is_active);
                        }
                    }
                }

                Tab {
                    title: Theme.tab-settings-title;

                    SettingsPanel {
                        midi_input_ports: midi_input_ports;

                        midi_port_selected(port_index) => {
                            root.midi_port_selected(port_index);
                        }

                        midi_channel_selected(channel) => {
                            root.midi_channel_selected(channel);
                        }
                    }

                }
            }
        }
    }
}
