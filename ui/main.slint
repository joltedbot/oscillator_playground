import { Button, Slider, Switch, SpinBox, HorizontalBox, TabWidget } from "std-widgets.slint";
import { Panel, Heading, Label, StartButton, WaveSelector, LevelSlider, OutputLevelSlider, ADSRSlider, FilterSlider, ActivationSwitch } from "../ui/components.slint";
import { Theme } from "../ui/theme.slint";
import { OscillatorPanel } from "../ui/oscillator-panel.slint";
import { FilterPanel } from "../ui/filter-panel.slint";
import { EnvelopePanel } from "../ui/envelope-panel.slint";
import { EffectsPanel } from "../ui/effects-panel.slint";
import { ButtonsPanel } from "../ui/buttons-panel.slint";
import { ArpeggiatorPanel } from "../ui/arpeggiator-panel.slint";


export component AppWindow inherits Window {
    title: Theme.window-title;
    min-width: Theme.window-width;
    min-height: Theme.window-height;
    default-font-size: Theme.text-size;
    background: transparent;

    in-out property <bool> start_button_active: false;

    callback start_button_pressed(bool);
    callback wave1_shape_selected(string);
    callback wave2_shape_selected(string);
    callback wave3_shape_selected(string);
    callback sub_shape_selected(string);
    callback wave1_level_selected(float);
    callback wave2_level_selected(float);
    callback wave3_level_selected(float);
    callback sub_level_selected(float);
    callback wave1_shaper_amount_changed(float);
    callback wave2_shaper_amount_changed(float);
    callback wave3_shaper_amount_changed(float);
    callback sub_shaper_amount_changed(float);
    callback wave1_mod_speed_changed(float);
    callback wave2_mod_speed_changed(float);
    callback wave3_mod_speed_changed(float);
    callback sub_mod_speed_changed(float);
    callback wave1_mod_amount_changed(float);
    callback wave2_mod_amount_changed(float);
    callback wave3_mod_amount_changed(float);
    callback sub_mod_amount_changed(float);
    callback wave1_tuning_changed(int);
    callback wave2_tuning_changed(int);
    callback wave3_tuning_changed(int);
    callback sub_tuning_changed(int);
    callback wave_detune_value_changed(float);
    callback wave_detune_state_changed(bool, float);
    callback output_level_value_changed(int);
    callback output_level_constant_activated(bool);
    callback envelope_attack_updated(int);
    callback envelope_decay_updated(int);
    callback envelope_release_updated(int);
    callback envelope_sustain_updated(int);
    callback adsr_note_length_updated(int);
    callback filter_cutoff_value_changed(int);
    callback filter_resonance_value_changed(float);
    callback number_of_poles_selected(int);
    callback resync_oscillators();
    callback resync_oscillator_lfos();
    callback enable_amp_envelope(bool);
    callback gate_length_changed(int);
    callback gate_duty_cycle_changed(float);
    callback auto_pan_activated(bool);
    callback auto_pan_speed_changed(float);
    callback auto_pan_width_changed(float);
    callback tremolo_activated(bool);
    callback tremolo_speed_changed(float);
    callback tremolo_depth_changed(float);
    callback filter_mod_activated(bool);
    callback filter_mod_speed_changed(float);
    callback filter_mod_amount_changed(float);
    callback phaser_activated(bool);
    callback phaser_speed_changed(float);
    callback phaser_amount_changed(float);
    callback bitcrusher_activated(bool);
    callback bitcrusher_amount_changed(int);
    callback wave_shaper_activated(bool);
    callback wave_shaper_amount_changed(float);
    callback compressor_activated(bool);
    callback compressor_threshold_changed(float);
    callback compressor_ratio_changed(float);
    callback wavefolder_activated(bool);
    callback wavefolder_threshold_changed(float);
    callback wavefolder_ratio_changed(float);
    callback limiter_activated(bool);
    callback limiter_threshold_changed(float);
    callback clipper_activated(bool);
    callback clipper_threshold_changed(float);
    callback note_activated(int);
    callback note_deactivated(int);
    callback arpeggiator_random_activated(bool);

    Rectangle {
        padding: 4px;
        border-width: Theme.window-border-width;
        background: Theme.window-background;
        border-color: Theme.border-colour;
        border-bottom-left-radius: Theme.border-radius;
        border-bottom-right-radius: Theme.border-radius;

        VerticalLayout {
            padding: 0px;
            spacing: 0px;

            Image {
                width: Theme.window-width;
                height: 50px;
                source: @image-url("../images/header.png");
            }

            TabWidget {
                Tab {
                    title: Theme.tab-synth-title;

                    HorizontalLayout {
                        alignment: center;
                        spacing: 10px;

                        VerticalLayout {
                            spacing: 5px;
                            padding: 5px;
                            alignment: start;

                            HorizontalLayout {
                                spacing: 5px;
                                alignment: start;

                                OscillatorPanel {

                                    wave1_level_selected(level) => {
                                        root.wave1_level_selected(level);
                                    }

                                    wave1_shape_selected(shape) => {
                                        root.wave1_shape_selected(shape);
                                    }

                                    wave1_tuning_changed(interval) => {
                                        root.wave1_tuning_changed(interval);
                                    }

                                    wave2_level_selected(level) => {
                                        root.wave2_level_selected(level);
                                    }

                                    wave2_shape_selected(shape) => {
                                        root.wave2_shape_selected(shape);
                                    }

                                    wave2_tuning_changed(interval) => {
                                        root.wave2_tuning_changed(interval);
                                    }

                                    wave3_level_selected(level) => {
                                        root.wave3_level_selected(level);
                                    }

                                    wave3_shape_selected(shape) => {
                                        root.wave3_shape_selected(shape);
                                    }

                                    wave3_tuning_changed(interval) => {
                                        root.wave3_tuning_changed(interval);
                                    }

                                    sub_level_selected(level) => {
                                        root.sub_level_selected(level);
                                    }

                                    sub_shape_selected(shape) => {
                                        root.sub_shape_selected(shape);
                                    }

                                    sub_tuning_changed(interval) => {
                                        root.sub_tuning_changed(interval);
                                    }

                                    wave1_shaper_amount_changed(shape) => {
                                        root.wave1_shaper_amount_changed(shape);
                                    }

                                    wave2_shaper_amount_changed(shape) => {
                                        root.wave2_shaper_amount_changed(shape);
                                    }

                                    wave3_shaper_amount_changed(shape) => {
                                        root.wave3_shaper_amount_changed(shape);
                                    }

                                    sub_shaper_amount_changed(shape) => {
                                        root.sub_shaper_amount_changed(shape);
                                    }

                                    wave1_mod_speed_changed(speed_hz) => {
                                        root.wave1_mod_speed_changed(speed_hz);
                                    }

                                    wave2_mod_speed_changed(speed_hz) => {
                                        root.wave2_mod_speed_changed(speed_hz);
                                    }

                                    wave3_mod_speed_changed(speed_hz) => {
                                        root.wave3_mod_speed_changed(speed_hz);
                                    }

                                    sub_mod_speed_changed(speed_hz) => {
                                        root.sub_mod_speed_changed(speed_hz);
                                    }

                                    wave1_mod_amount_changed(amount) => {
                                        root.wave1_mod_amount_changed(amount);
                                    }

                                    wave2_mod_amount_changed(amount) => {
                                        root.wave2_mod_amount_changed(amount);
                                    }

                                    wave3_mod_amount_changed(amount) => {
                                        root.wave3_mod_amount_changed(amount);
                                    }

                                    sub_mod_amount_changed(amount) => {
                                        root.sub_mod_amount_changed(amount);
                                    }

                                    wave_detune_value_changed(int) => {
                                        root.wave_detune_value_changed(int);
                                    }

                                    wave_detune_state_changed(active, amount) => {
                                        root.wave_detune_state_changed(active, amount)
                                    }

                                    output_level_value_changed(level) => {
                                        root.output_level_value_changed(level);
                                    }

                                    output_level_constant_activated(is_active) => {
                                        root.output_level_constant_activated(is_active);
                                    }
                                }

                                EnvelopePanel {
                                    envelope_attack_updated(milliseconds) => {
                                        root.envelope_attack_updated(milliseconds);
                                    }

                                    envelope_decay_updated(milliseconds) => {
                                        root.envelope_decay_updated(milliseconds);
                                    }

                                    envelope_release_updated(milliseconds) => {
                                        root.envelope_release_updated(milliseconds);
                                    }

                                    envelope_sustain_updated(milliseconds) => {
                                        root.envelope_sustain_updated(milliseconds);
                                    }

                                    adsr_note_length_updated(milliseconds) => {
                                        root.adsr_note_length_updated(milliseconds);
                                    }

                                    enable_amp_envelope(is_enabled) => {
                                        root.enable_amp_envelope(is_enabled);
                                    }

                                    gate_length_changed(note_length) => {
                                        root.gate_length_changed(note_length);
                                    }

                                    gate_duty_cycle_changed(duty_cycle) => {
                                        root.gate_duty_cycle_changed(duty_cycle);
                                    }
                                }
                            }

                            HorizontalLayout {
                                spacing: 5px;
                                alignment: start;

                                FilterPanel {
                                    number_of_poles_selected(number_of_poles) => {
                                        root.number_of_poles_selected(number_of_poles);
                                    }

                                    filter_cutoff_value_changed(cutoff) => {
                                        root.filter_cutoff_value_changed(cutoff);
                                    }

                                    filter_resonance_value_changed(resonance) => {
                                        root.filter_resonance_value_changed(resonance);
                                    }

                                    filter_mod_activated(is_active) => {
                                        root.filter_mod_activated(is_active);
                                    }
                                    filter_mod_speed_changed(speed) => {
                                        root.filter_mod_speed_changed(speed);
                                    }
                                    filter_mod_amount_changed(amount) => {
                                        root.filter_mod_amount_changed(amount);
                                    }
                                }

                                ButtonsPanel {

                                    start_button_active: start_button_active;

                                    start_button_pressed(active) => {
                                        root.start_button_pressed(active);
                                    }

                                    resync_oscillators() => {
                                        root.resync_oscillators();
                                    }

                                    resync_oscillator_lfos() => {
                                        root.resync_oscillator_lfos();
                                    }
                                }
                            }
                        }
                    }
                }

                Tab {
                    title: Theme.tab-effects-title;

                    VerticalLayout {
                        spacing: 5px;
                        alignment: start;

                        EffectsPanel {
                            phaser_activated(is_activated) => {
                                phaser_activated(is_activated);
                            }

                            phaser_speed_changed(speed_hz) => {
                                phaser_speed_changed(speed_hz);
                            }

                            phaser_amount_changed(amount) => {
                                phaser_amount_changed(amount);
                            }

                            bitcrusher_activated(is_activated) => {
                                root.bitcrusher_activated(is_activated);
                            }

                            bitcrusher_amount_changed(amount) => {
                                root.bitcrusher_amount_changed(amount);
                            }

                            wave_shaper_activated(is_activated) => {
                                root.wave_shaper_activated(is_activated);
                            }

                            wave_shaper_amount_changed(amount) => {
                                root.wave_shaper_amount_changed(amount);
                            }

                            auto_pan_activated(is_actived) => {
                                root.auto_pan_activated(is_actived);
                            }

                            auto_pan_speed_changed(speed_hz) => {
                                root.auto_pan_speed_changed(speed_hz);
                            }

                            auto_pan_width_changed(speed_hz) => {
                                root.auto_pan_width_changed(speed_hz);
                            }

                            tremolo_activated(is_actived) => {
                                root.tremolo_activated(is_actived);
                            }

                            tremolo_speed_changed(speed_hz) => {
                                root.tremolo_speed_changed(speed_hz);
                            }

                            tremolo_depth_changed(depth) => {
                                root.tremolo_depth_changed(depth);
                            }

                            compressor_activated(is_actived) => {
                                root.compressor_activated(is_actived);
                            }

                            compressor_threshold_changed(threshold) => {
                                root.compressor_threshold_changed(threshold);
                            }

                            compressor_ratio_changed(ratio) => {
                                root.compressor_ratio_changed(ratio);
                            }

                            wavefolder_activated(is_actived) => {
                                root.wavefolder_activated(is_actived);
                            }

                            wavefolder_threshold_changed(threshold) => {
                                root.wavefolder_threshold_changed(threshold);
                            }

                            wavefolder_ratio_changed(ratio) => {
                                root.wavefolder_ratio_changed(ratio);
                            }

                            limiter_activated(is_actived) => {
                                root.limiter_activated(is_actived);
                            }

                            limiter_threshold_changed(threshold) => {
                                root.limiter_threshold_changed(threshold);
                            }

                            clipper_activated(is_actived) => {
                                root.clipper_activated(is_actived);
                            }

                            clipper_threshold_changed(threshold) => {
                                root.clipper_threshold_changed(threshold);
                            }
                        }
                    }
                }

                Tab {
                    title: Theme.tab-arpeggiator-title;

                    ArpeggiatorPanel {

                        note_activated(note_number) => {
                            root.note_activated(note_number);
                        }

                        note_deactivated(note_number) => {
                            root.note_deactivated(note_number);
                        }
                        arpeggiator_random_activated(is_active) => {
                            root.arpeggiator_random_activated(is_active);
                        }
                    }
                }
            }
        }
    }
}
