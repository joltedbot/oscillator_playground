import { Panel, Heading, Label, MidiSelector, AudioDeviceSelector, VerticalSpacer, HorizontalSpacer } from "../ui/components.slint";
import { Theme } from "../ui/theme.slint";

export component SettingsPanel inherits VerticalLayout {
    in-out property <[string]> midi_input_ports;
    in-out property <[string]> audio_output_device_list;
    in-out property <[string]> audio_output_channels;
    in-out property <string> audio_output_left_channel;
    in-out property <string> audio_output_right_channel;
    in-out property <string> audio_output_device;

    callback midi_port_selected(int);
    callback midi_channel_selected(int);
    callback audio_device_selected(string);
    callback audio_channels_selected(string, string);

    padding: 5px;
    spacing: 5px;

    Panel {
        panel-height: Theme.settings-panel-height;
        panel-width: Theme.settings-panel-width;

        HorizontalLayout {

            VerticalLayout {
                alignment: start;
                padding: 10px;
                spacing: 10px;

                Heading {
                    heading: Theme.settings-midi-text;
                }

                Label {
                    label: Theme.settings-midi-port-text;
                }

                MidiSelector {
                    width: Theme.settings-device-selector-width;
                    list: midi_input_ports;
                    item_selected(port_index) => {
                        root.midi_port_selected(port_index);
                    }
                }

                Label {
                    label: Theme.settings-midi-channel-text;
                }

                MidiSelector {
                    width: Theme.settings-midi-channel-selector-width;
                    list: Theme.midi_channel_list;
                    item_selected(channel) => {
                        root.midi_channel_selected(channel);
                    }
                }
            }

            VerticalSpacer { }

            VerticalLayout {
                alignment: start;
                padding: 10px;
                spacing: 10px;

                Heading {
                    heading: Theme.settings-audio-text;
                }

                Label {
                    label: Theme.settings-audio-output-device-text;
                }

                output_device := AudioDeviceSelector {

                    width: Theme.settings-device-selector-width;
                    list: audio_output_device_list;
                    current-item: audio_output_device;
                    item_selected(device) => {
                        root.audio_device_selected(device);
                    }
                }

                Label {
                    label: Theme.settings-audio-channels-text;
                }

                HorizontalLayout {
                    spacing: 10px;

                    left_channel := AudioDeviceSelector {

                        changed list => {
                            self.current-index = Theme.settings-audio-default-left-index;
                        }

                        current-item: audio_output_left_channel;
                        width: Theme.settings-audio-channel-selector-width;
                        list: audio_output_channels;
                        item_selected(channel) => {
                            root.audio_channels_selected(channel, right_channel.current-value);
                        }
                    }

                    right_channel := AudioDeviceSelector {

                        states [
                            Mono when audio_output_right_channel == "": {
                                enabled: false;
                            }
                            MultiChannel when audio_output_right_channel != "": {
                                enabled: true;
                            }
                        ]

                        changed list => {
                            self.current-index = Theme.settings-audio-default-right-index;
                        }

                        current-item: audio_output_right_channel;
                        width: Theme.settings-audio-channel-selector-width;
                        list: audio_output_channels;
                        item_selected(channel) => {
                            root.audio_channels_selected(left_channel.current-value, channel);
                        }
                    }
                }
            }

            VerticalSpacer { }

            VerticalLayout {
                alignment: center;
                HorizontalLayout {
                    horizontal-stretch: 1;
                    alignment: center;
                    HorizontalSpacer { }
                }
            }
        }
    }

    Panel {
        width: Theme.settings-panel-width;
        height: Theme.settings-bottom-panel-height;

        VerticalLayout {

            alignment: center;

            HorizontalSpacer { }


        }
    }

}
