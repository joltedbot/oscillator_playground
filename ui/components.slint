import { Button, ComboBox, Slider, Switch, GridBox, CheckBox } from "std-widgets.slint";
import { Theme } from "../ui/theme.slint";



export component Heading inherits Text {
    in-out property <string> heading;
    text: heading;
    font-weight: Theme.text-weight-bold;
    font-size: Theme.heading-text-size;
}

export component Label inherits Text {
    in-out property <string> label;

    text: label;
    font-size: Theme.label-text-size;
}

export component Panel inherits Rectangle {
    border-width: Theme.window-border-width;
    border-color: Theme.border-colour;
    border-radius: Theme.border-radius;
    background: Theme.panel-box-background;



}


export component StartButton inherits Button {
    in-out property <bool> active;
    callback tone_start_button_pressed(bool);

    states [
        running when active: {
            text: Theme.start-button-running-text;
            primary: true;
        }
        stopped when !active: {
            text: Theme.start-button-stopped-text;
            primary: false;
        }
    ]

    width: Theme.start-button-width;
    height: Theme.start-button-height;
    clicked => {
        active = !active;
        tone_start_button_pressed(active);
    }
}

export component ActionButton inherits Button {
    callback take_action();

    states [
        on when self.pressed: {
            primary: true;
        }
        off when !self.pressed: {
            primary: false;
        }
    ]

    clicked => {
        take_action();
    }
}

export component WaveSelector inherits ComboBox {
    in-out property <string> shape: Theme.wave-shape-default;
    callback wave_shape_selected(string);

    width: Theme.wave-shape-switch-width;
    model: Theme.wave-shape-list;
    current-value: shape;
    selected(shape) => {
        wave_shape_selected(shape);
    }
}

export component LevelSlider inherits Slider {
    in-out property <int> level;
    in-out property <int> minimum-level;
    in-out property <int> maximum-level;
    in-out property <int> level-step;

    callback level_selected(float);

    value: level;
    step: level-step;
    minimum: minimum-level;
    maximum: maximum-level;

    changed value => {
        level = self.value;
        if (self.value < level-step) {
            self.value == 0;
        }
        level_selected(round(self.value));
    }
}

export component OutputLevelSlider inherits Slider {
    in-out property <int> level;
    callback level_selected(int);

    value: level;
    step: Theme.output-level-slider-step;
    minimum: Theme.output-level-slider-minimum;
    maximum: Theme.output-level-slider-maximum;

    changed value => {
        level_selected(round(self.value));
    }
}

export component ADSRSlider inherits Slider {
    in-out property <int> milliseconds;
    callback milliseconds_selected(float);

    value: milliseconds;
    step: Theme.milliseconds-slider-step;
    minimum: Theme.milliseconds-slider-minimum;
    maximum: Theme.milliseconds-slider-maximum;

    changed value => {
        milliseconds = self.value;
        milliseconds_selected(self.value);
    }
}

export component LFOSlider inherits Slider {
    in-out property <float> slider_value;
    callback level_selected(float);

    value: slider_value;

    changed value => {
        slider_value = self.value;
        level_selected(self.value);
    }
}

export component ActivationSwitch inherits Switch {
    callback activation_toggled(bool);
    in-out property <bool> activated: self.checked;
    in-out property <string> activated-text;
    in-out property <string> not-activated-text;

    text: self.checked ? activated-text : not-activated-text;
    width: Theme.activation-switch-width;

    toggled() => {
        activation_toggled(self.checked)
    }
}

export component FilterSlider inherits Slider {
    in-out property <int> number_of_poles: Theme.filter-poles-slider-default;
    callback number_of_poles_selected(int);

    width: Theme.filter-poles-slider-width;
    value: number_of_poles;
    step: Theme.filter-poles-slider-step;
    minimum: Theme.filter-poles-slider-minimum;
    maximum: Theme.filter-poles-slider-maximum;

    released(value) => {
        self.value = round(value);
        number_of_poles = round(value);
        number_of_poles_selected(round(value));
    }
}

export component ArpNoteBox inherits HorizontalLayout {

    in-out property <bool> check-default-note;
    callback note_active(bool);

    alignment: center;

    box := CheckBox {
        checked: check-default-note;
        toggled() => {
            check-default-note = self.checked;
            note_active(self.checked)
        }
    }
}

export component DiabledBox inherits HorizontalLayout {
    alignment: center;

    CheckBox {
        enabled: false;
    }
}

export component ArpTableRow inherits HorizontalLayout {

    in-out property <string> octave-number;
    in-out property <int> row-number;
    in-out property <bool> is-default-note;
    property <int> box-offset: (12 * row-number);

    callback note_activated(int);
    callback note_deactivated(int);

    spacing: 20px;
    alignment: space-between;

    Label {
        width: 60px;
        label: octave-number;
    }

    box0 := ArpNoteBox {
        check-default-note: is-default-note;
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset);
            } else {
                note_deactivated(box-offset);
            }
        }
    }

    box1 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 1);
            } else {
                note_deactivated(box-offset + 1);
            }
        }
    }

    box2 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 2);
            } else {
                note_deactivated(box-offset + 2);
            }
        }
    }

    box3 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 3);
            } else {
                note_deactivated(box-offset + 3);
            }
        }
    }

    box4 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 4);
            } else {
                note_deactivated(box-offset + 4);
            }
        }
    }

    box5 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 5);
            } else {
                note_deactivated(box-offset + 5);
            }
        }
    }

    box6 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 6);
            } else {
                note_deactivated(box-offset + 6);
            }
        }
    }

    box7 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 7);
            } else {
                note_deactivated(box-offset + 7);
            }
        }
    }

    box8 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 8);
            } else {
                note_deactivated(box-offset + 8);
            }
        }
    }

    box9 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 9);
            } else {
                note_deactivated(box-offset + 9);
            }
        }
    }

    box10 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 10);
            } else {
                note_deactivated(box-offset + 10);
            }
        }
    }

    box11 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 11);
            } else {
                note_deactivated(box-offset + 11);
            }
        }
    }
}

export component ArpTableLastRow inherits HorizontalLayout {

    in-out property <string> octave-number;
    in-out property <int> row-number;
    property <int> box-offset: (12 * row-number);

    callback note_activated(int);
    callback note_deactivated(int);

    spacing: 20px;
    alignment: space-between;

    Label {
        width: 60px;
        label: octave-number;
    }

    box1 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset);
            } else {
                note_deactivated(box-offset);
            }
        }
    }

    box2 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 1);
            } else {
                note_deactivated(box-offset + 1);
            }
        }
    }

    box3 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 2);
            } else {
                note_deactivated(box-offset + 2);
            }
        }
    }

    box4 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 3);
            } else {
                note_deactivated(box-offset + 3);
            }
        }
    }

    box5 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 4);
            } else {
                note_deactivated(box-offset + 4);
            }
        }
    }

    box6 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 5);
            } else {
                note_deactivated(box-offset + 5);
            }
        }
    }

    box7 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 6);
            } else {
                note_deactivated(box-offset + 6);
            }
        }
    }

    box8 := ArpNoteBox {
        note_active(is_checked) => {
            if (is_checked) {
                note_activated(box-offset + 7);
            } else {
                note_deactivated(box-offset + 7);
            }
        }
    }

    Label {
        label: " - ";
    }

    Label {
        label: " - ";
    }

    Label {
        label: " - ";
    }

    Label {
        label: " - ";
    }
}

export component ArpTableFirstRow inherits HorizontalLayout {

    spacing: 20px;
    alignment: space-between;

    Label {
        width: 60px;
        label: "Octave";
    }

    Label {
        label: "C";
    }

    Label {
        label: "C#/Db";
    }

    Label {
        label: "D";
    }

    Label {
        label: "D#/Eb";
    }

    Label {
        label: "E";
    }

    Label {
        label: "F";
    }

    Label {
        label: "F#/Gb";
    }

    Label {
        label: "G";
    }

    Label {
        label: "G#/Ab";
    }

    Label {
        label: "A";
    }

    Label {
        label: "A#/Bb";
    }

    Label {
        label: "B";
    }
}
