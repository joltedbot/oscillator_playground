import { Panel, Heading, Label, LFOSlider,SaturationSelector, LevelSlider, VerticalLabeledIntSlider, ActivationSwitch, VerticalSpacer, HorizontalSpacer } from "../ui/components.slint";
import { Theme } from "../ui/theme.slint";

export component EffectsPanel inherits VerticalLayout {

    callback phaser_activated(bool);
    callback phaser_speed_changed(float);
    callback phaser_amount_changed(float);
    callback bitcrusher_activated(bool);
    callback bitcrusher_amount_changed(int);
    callback saturation_mode_selected(string);
    callback saturation_activated(bool);
    callback saturation_amount_changed(float);
    callback makeup_gain_changed(int);
    callback auto_pan_activated(bool);
    callback tremolo_activated(bool);
    callback auto_pan_speed_changed(float);
    callback tremolo_speed_changed(float);
    callback auto_pan_width_changed(float);
    callback tremolo_depth_changed(float);
    callback compressor_activated(bool);
    callback compressor_threshold_changed(float);
    callback compressor_ratio_changed(float);
    callback wave_folder_activated(bool);
    callback wave_folder_threshold_changed(float);
    callback wave_folder_ratio_changed(float);
    callback limiter_activated(bool);
    callback limiter_threshold_changed(float);
    callback clipper_activated(bool);
    callback clipper_threshold_changed(float);

    alignment: start;
    padding: 5px;
    spacing: 5px;

    Panel {
        width: Theme.effects-panel-width;
        height: Theme.effects-panel-height;

        HorizontalLayout {
            autopan := VerticalLayout {
                alignment: start;
                spacing: 20px;
                padding: 10px;

                HorizontalLayout {
                    alignment: center;
                    spacing: 20px;

                    VerticalLayout {
                        spacing: 10px;

                        Heading {
                            horizontal-alignment: center;
                            heading: Theme.auto-pan-heading-text;
                        }

                        ActivationSwitch {
                            activated-text: Theme.activation-switch-active-text;
                            not-activated-text: Theme.activation-switch-not-active-text;

                            activation_toggled => {
                                auto_pan_course_speed.enabled = self.activated;
                                auto_pan_fine_speed.enabled = self.activated;
                                auto_pan_width.enabled = self.activated;
                                auto_pan_activated(self.checked);
                            }
                        }

                        Label {
                            label: Theme.auto_pan-speed-text + (round(auto_pan_course_speed.value) + (round(auto_pan_fine_speed.value * 100) / 100)) + Theme.auto_pan-speed-suffix;
                        }

                        HorizontalLayout {
                            Label {
                                label: Theme.slider-course-text;
                            }

                            auto_pan_course_speed := LFOSlider {
                                slider_value: Theme.auto_pan-course-speed-slider-default;
                                step: self.slider_value;
                                minimum: Theme.auto_pan-course-speed-slider-minimum;
                                maximum: Theme.auto_pan-course-speed-slider-maximum;
                                enabled: false;
                                level_selected(level) => {
                                    auto_pan_speed_changed(level + auto_pan_fine_speed.value);
                                }
                            }
                        }

                        HorizontalLayout {
                            Label {
                                label: Theme.slider-fine-text;
                            }

                            auto_pan_fine_speed := LFOSlider {
                                slider_value: Theme.auto_pan-fine-speed-slider-default;
                                step: self.slider_value;
                                minimum: Theme.auto_pan-fine-speed-slider-minimum;
                                maximum: Theme.auto_pan-fine-speed-slider-maximum;
                                enabled: false;
                                level_selected(level) => {
                                    auto_pan_speed_changed(level + auto_pan_course_speed.value);
                                }
                            }
                        }

                        Label {
                            label: Theme.auto-pan-width-text + round((auto_pan_width.value / 2.0) * 100) + Theme.auto-pan-width-suffix;
                        }

                        auto_pan_width := LFOSlider {
                            slider_value: Theme.auto-pan-width-slider-default;
                            step: Theme.auto-pan-width-slider-step;
                            minimum: Theme.auto-pan-width-slider-minimum;
                            maximum: Theme.auto-pan-width-slider-maximum;
                            enabled: false;
                            level_selected(level) => {
                                auto_pan_width_changed(level);
                            }
                        }
                    }
                }
            }

            VerticalSpacer { }

            phaser := VerticalLayout {
                alignment: start;
                spacing: 20px;
                padding: 10px;

                HorizontalLayout {
                    alignment: center;
                    spacing: 20px;

                    VerticalLayout {
                        spacing: 10px;

                        Heading {
                            horizontal-alignment: center;
                            heading: Theme.phaser-heading-text;
                        }

                        ActivationSwitch {
                            activated-text: Theme.activation-switch-active-text;
                            not-activated-text: Theme.activation-switch-not-active-text;
                            activation_toggled => {
                                phaser_course_speed.enabled = self.activated;
                                phaser_fine_speed.enabled = self.activated;
                                phaser_amount.enabled = self.activated;
                                phaser_activated(self.checked);
                            }
                        }

                        Label {
                            label: Theme.phaser-speed-text + (round(phaser_course_speed.value) + (round(phaser_fine_speed.value * 100) / 100)) + Theme.phaser-speed-suffix;
                        }

                        HorizontalLayout {
                            Label {
                                label: Theme.slider-course-text;
                            }

                            phaser_course_speed := LFOSlider {
                                slider_value: Theme.phaser-course-speed-slider-default;
                                step: self.slider_value;
                                minimum: Theme.phaser-course-speed-slider-minimum;
                                maximum: Theme.phaser-course-speed-slider-maximum;
                                enabled: false;
                                level_selected(level) => {
                                    phaser_speed_changed(level + phaser_fine_speed.value);
                                }
                            }
                        }

                        HorizontalLayout {
                            Label {
                                label: Theme.slider-fine-text;
                            }

                            phaser_fine_speed := LFOSlider {
                                slider_value: Theme.phaser-fine-speed-slider-default;
                                step: self.slider_value;
                                minimum: Theme.phaser-fine-speed-slider-minimum;
                                maximum: Theme.phaser-fine-speed-slider-maximum;
                                enabled: false;
                                level_selected(level) => {
                                    phaser_speed_changed(level + phaser_course_speed.value);
                                }
                            }
                        }

                        Label {
                            label: Theme.phaser-amount-text + round(phaser_amount.value);
                        }

                        phaser_amount := LFOSlider {
                            slider_value: Theme.phaser-amount-slider-default;
                            step: Theme.phaser-amount-slider-step;
                            minimum: Theme.phaser-amount-slider-minimum;
                            maximum: Theme.phaser-amount-slider-maximum;
                            enabled: false;
                            level_selected(level) => {
                                phaser_amount_changed(round(level));
                            }
                        }
                    }
                }
            }

            VerticalSpacer { }

            tremolo := VerticalLayout {
                alignment: start;
                spacing: 20px;
                padding: 10px;

                HorizontalLayout {
                    alignment: center;
                    spacing: 20px;

                    VerticalLayout {
                        spacing: 10px;

                        Heading {
                            horizontal-alignment: center;
                            heading: Theme.tremolo-heading-text;
                        }

                        ActivationSwitch {
                            activated-text: Theme.activation-switch-active-text;
                            not-activated-text: Theme.activation-switch-not-active-text;

                            activation_toggled => {
                                tremolo_course_speed.enabled = self.activated;
                                tremolo_fine_speed.enabled = self.activated;
                                tremolo_depth.enabled = self.activated;
                                tremolo_activated(self.checked);
                            }
                        }

                        Label {
                            label: Theme.tremolo-speed-text + (round(tremolo_course_speed.value) + (round(tremolo_fine_speed.value * 100) / 100)) + Theme.tremolo-speed-suffix;
                        }

                        HorizontalLayout {
                            Label {
                                label: Theme.slider-course-text;
                            }

                            tremolo_course_speed := LFOSlider {
                                slider_value: Theme.tremolo-course-speed-slider-default;
                                step: self.slider_value;
                                minimum: Theme.tremolo-course-speed-slider-minimum;
                                maximum: Theme.tremolo-course-speed-slider-maximum;
                                enabled: false;
                                level_selected(level) => {
                                    tremolo_speed_changed(level + tremolo_fine_speed.value);
                                }
                            }
                        }

                        HorizontalLayout {
                            Label {
                                label: Theme.slider-fine-text;
                            }

                            tremolo_fine_speed := LFOSlider {
                                slider_value: Theme.tremolo-fine-speed-slider-default;
                                step: self.slider_value;
                                minimum: Theme.tremolo-fine-speed-slider-minimum;
                                maximum: Theme.tremolo-fine-speed-slider-maximum;
                                enabled: false;
                                level_selected(level) => {
                                    tremolo_speed_changed(level + tremolo_course_speed.value);
                                }
                            }
                        }

                        Label {
                            label: Theme.tremolo-depth-text + round(tremolo_depth.value * 100) + Theme.tremolo-depth-suffix;
                        }

                        tremolo_depth := LFOSlider {
                            slider_value: Theme.tremolo-depth-slider-default;
                            step: Theme.tremolo-depth-slider-step;
                            minimum: Theme.tremolo-depth-slider-minimum;
                            maximum: Theme.tremolo-depth-slider-maximum;
                            enabled: false;
                            level_selected(level) => {
                                tremolo_depth_changed(level);
                            }
                        }
                    }
                }
            }

            VerticalSpacer { }

            bitcrusher := VerticalLayout {
                alignment: start;
                spacing: 20px;
                padding: 10px;

                HorizontalLayout {
                    alignment: center;
                    spacing: 20px;

                    VerticalLayout {
                        spacing: 10px;

                        Heading {
                            horizontal-alignment: center;
                            heading: Theme.bitcrush-heading-text;
                        }

                        ActivationSwitch {
                            activated-text: Theme.activation-switch-active-text;
                            not-activated-text: Theme.activation-switch-not-active-text;
                            activation_toggled => {
                                bitcrush_amount.enabled = self.activated;
                                bitcrusher_activated(self.checked);
                            }
                        }

                        Label {
                            label: Theme.bitcrush-amount-text + round(bitcrush_amount.value);
                        }

                        bitcrush_amount := LFOSlider {
                            slider_value: Theme.bitcrush-amount-slider-default;
                            step: Theme.bitcrush-amount-slider-step;
                            minimum: Theme.bitcrush-amount-slider-minimum;
                            maximum: Theme.bitcrush-amount-slider-maximum;
                            enabled: false;
                            level_selected(level) => {
                                bitcrusher_amount_changed(round(level));
                            }
                        }
                    }
                }
            }

            VerticalSpacer { }

            saturation := VerticalLayout {
                alignment: start;
                spacing: 20px;
                padding: 10px;

                HorizontalLayout {
                    alignment: center;
                    spacing: 20px;

                    VerticalLayout {
                        spacing: 10px;

                        Heading {
                            horizontal-alignment: center;
                            heading: Theme.saturation-heading-text;
                        }

                        ActivationSwitch {
                            activated-text: Theme.activation-switch-active-text;
                            not-activated-text: Theme.activation-switch-not-active-text;
                            activation_toggled => {
                                saturation_amount.enabled = self.activated;
                                saturation_mode.enabled = self.activated;
                                makeup_gain.is_enabled = self.activated;
                                saturation_activated(self.checked);
                            }
                        }

                       saturation_mode := SaturationSelector {
                            height: Theme.saturation-selector-height;
                            width: Theme.saturation-selector-width;
                            enabled: false;

                            saturation_mode_selected(mode) => {
                                saturation_mode_selected(mode);
                            }
                        }


                        Label {
                            label: Theme.saturation-amount-text + (round(saturation_amount.value*10));
                        }

                        saturation_amount := LFOSlider {
                            slider_value: Theme.saturation-amount-slider-default;
                            step: Theme.saturation-amount-slider-step;
                            minimum: Theme.saturation-amount-slider-minimum;
                            maximum: Theme.saturation-amount-slider-maximum;
                            enabled: false;
                            level_selected(amount) => {
                                saturation_amount_changed(round(amount * 10.0) / 10.0);
                            }
                        }
                        
                        
                        makeup_gain := VerticalLabeledIntSlider {
                            label: Theme.makeup-gain-label-text + makeup_gain.slider_value + Theme.output-level-label-suffix;
                            slider_value: Theme.makeup-gain-slider-default;
                            is_bold: true;
                            is_enabled: false;
                            step: Theme.makeup-gain-slider-step;
                            minimum: Theme.makeup-gain-slider-minimum;
                            maximum: Theme.makeup-gain-slider-maximum;
    
                            new_value_selected(level) => {
                                root.makeup_gain_changed(level);
                            }
                        }

                    }
                }
            }
        }
    }

    Panel {
        width: Theme.effects-panel-width;
        height: Theme.effects-panel-height;

        HorizontalLayout {

            wave_folder := VerticalLayout {
                alignment: start;
                spacing: 20px;
                padding: 10px;
                HorizontalLayout {
                    alignment: center;
                    spacing: 20px;
                    VerticalLayout {
                        spacing: 10px;
                        Heading {
                            horizontal-alignment: center;
                            heading: Theme.wave_folder-heading-text;
                        }

                        ActivationSwitch {
                            activated-text: Theme.activation-switch-active-text;
                            not-activated-text: Theme.activation-switch-not-active-text;
                            activation_toggled => {
                                wave_folder_threshold.enabled = self.activated;
                                wave_folder_ratio.enabled = self.activated;
                                wave_folder_activated(self.checked);
                            }
                        }

                        Label {
                            label: Theme.wave_folder-threshold-text + round(wave_folder_threshold.slider_value);
                        }

                        wave_folder_threshold := LFOSlider {
                            slider_value: Theme.wave_folder-threshold-default;
                            step: Theme.wave_folder-threshold-step;
                            minimum: Theme.wave_folder-threshold-minimum;
                            maximum: Theme.wave_folder-threshold-maximum;
                            enabled: false;
                            level_selected(level) => {
                                wave_folder_threshold_changed(round(level));
                            }
                        }

                        Label {
                            label: Theme.wave_folder-ratio-text + round(wave_folder_ratio.value) + Theme.wave_folder-ratio-suffix;
                        }

                        wave_folder_ratio := LevelSlider {
                            value: Theme.wave_folder-ratio-default;
                            step: Theme.wave_folder-ratio-step;
                            minimum: Theme.wave_folder-ratio-minimum;
                            maximum: Theme.wave_folder-ratio-maximum;
                            enabled: false;
                            level_selected(level) => {
                                wave_folder_ratio_changed(1 / round(level));
                            }
                        }
                    }
                }
            }

            VerticalSpacer { }

            compressor := VerticalLayout {
                alignment: start;
                spacing: 20px;
                padding: 10px;

                HorizontalLayout {
                    alignment: center;
                    spacing: 20px;

                    VerticalLayout {
                        spacing: 10px;

                        Heading {
                            horizontal-alignment: center;
                            heading: Theme.compressor-heading-text;
                        }

                        ActivationSwitch {
                            activated-text: Theme.activation-switch-active-text;
                            not-activated-text: Theme.activation-switch-not-active-text;

                            activation_toggled => {
                                compressor_threshold.enabled = self.activated;
                                compressor_ratio.enabled = self.activated;
                                compressor_activated(self.checked);
                            }
                        }

                        Label {
                            label: Theme.compressor-threshold-text + round(compressor_threshold.slider_value);
                        }

                        compressor_threshold := LFOSlider {
                            slider_value: Theme.compressor-threshold-default;
                            step: Theme.compressor-threshold-step;
                            minimum: Theme.compressor-threshold-minimum;
                            maximum: Theme.compressor-threshold-maximum;
                            enabled: false;
                            level_selected(level) => {
                                compressor_threshold_changed(round(level));
                            }
                        }

                        Label {
                            label: Theme.compressor-ratio-text + round(compressor_ratio.value) + Theme.compressor-ratio-suffix;
                        }

                        compressor_ratio := LevelSlider {
                            value: Theme.compressor-ratio-default;
                            step: Theme.compressor-ratio-step;
                            minimum: Theme.compressor-ratio-minimum;
                            maximum: Theme.compressor-ratio-maximum;
                            enabled: false;
                            level_selected(level) => {
                                compressor_ratio_changed(1 / round(level));
                            }
                        }
                    }
                }
            }

            VerticalSpacer { }

            limiter := VerticalLayout {
                alignment: start;
                spacing: 20px;
                padding: 10px;
                HorizontalLayout {
                    alignment: center;
                    spacing: 20px;

                    VerticalLayout {
                        spacing: 10px;
                        Heading {
                            horizontal-alignment: center;
                            heading: Theme.limiter-heading-text;
                        }

                        ActivationSwitch {
                            activated-text: Theme.activation-switch-active-text;
                            not-activated-text: Theme.activation-switch-not-active-text;
                            activation_toggled => {
                                limiter_threshold.enabled = self.activated;
                                limiter_activated(self.checked);
                            }
                        }

                        Label {
                            label: Theme.limiter-threshold-text + round(limiter_threshold.slider_value);
                        }

                        limiter_threshold := LFOSlider {
                            slider_value: Theme.limiter-threshold-default;
                            step: Theme.limiter-threshold-step;
                            minimum: Theme.limiter-threshold-minimum;
                            maximum: Theme.limiter-threshold-maximum;
                            enabled: false;
                            level_selected(level) => {
                                limiter_threshold_changed(round(level));
                            }
                        }
                    }
                }
            }

            VerticalSpacer { }

            clipper := VerticalLayout {
                alignment: start;
                spacing: 20px;
                padding: 10px;
                HorizontalLayout {
                    alignment: center;
                    spacing: 20px;
                    VerticalLayout {
                        spacing: 10px;
                        Heading {
                            horizontal-alignment: center;
                            heading: Theme.clipper-heading-text;
                        }

                        ActivationSwitch {
                            activated-text: Theme.activation-switch-active-text;
                            not-activated-text: Theme.activation-switch-not-active-text;
                            activation_toggled => {
                                clipper_threshold.enabled = self.activated;
                                clipper_activated(self.checked);
                            }
                        }

                        Label {
                            label: Theme.clipper-threshold-text + round(clipper_threshold.slider_value);
                        }

                        clipper_threshold := LFOSlider {
                            slider_value: Theme.clipper-threshold-default;
                            step: Theme.clipper-threshold-step;
                            minimum: Theme.clipper-threshold-minimum;
                            maximum: Theme.clipper-threshold-maximum;
                            enabled: false;
                            level_selected(level) => {
                                clipper_threshold_changed(round(level));
                            }
                        }
                    }
                }
            }

            VerticalSpacer { }

            blankpanel := VerticalLayout {
                alignment: center;
                spacing: 20px;
                padding: 10px;

                HorizontalSpacer {
                    width: 240px;
                }
            }
        }
    }

    Panel {
        width: Theme.effects-panel-width;
        height: Theme.effects-bottom-panel-height;

        VerticalLayout {

            alignment: center;

            HorizontalSpacer { }
        }
    }
}
