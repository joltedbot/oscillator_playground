import { Panel, Heading, Label, LevelSlider, LFOSlider, WaveSelector, ActivationSwitch, StartButton, ActionButton } from "../ui/components.slint";
import { Theme } from "../ui/theme.slint";

export component OscillatorPanel inherits HorizontalLayout {

    callback wave_level1_selected(float);
    callback wave_shape1_selected(string);
    callback wave_level2_selected(float);
    callback wave_shape2_selected(string);
    callback wave_level3_selected(float);
    callback wave_shape3_selected(string);
    callback sub_level_selected(int);
    callback sub_shape_selected(string);
    callback wave1_shaper_amount_changed(float);
    callback wave2_shaper_amount_changed(float);
    callback wave3_shaper_amount_changed(float);
    callback sub_shaper_amount_changed(float);
    callback wave_mod1_speed_changed(float);
    callback wave_mod2_speed_changed(float);
    callback wave_mod3_speed_changed(float);
    callback sub_mod_speed_changed(float);
    callback wave_mod1_amount_changed(float);
    callback wave_mod2_amount_changed(float);
    callback wave_mod3_amount_changed(float);
    callback sub_mod_amount_changed(float);
    callback wave_detune_value_changed(float);
    callback wave_detune_state_changed(bool, float);
    callback output_level_value_changed(int);
    callback output_level_constant_activated(bool);

    Panel {
        width: Theme.oscillator-panel-width;

        VerticalLayout {
            alignment: center;
            spacing: 10px;
            padding: 20px;

            HorizontalLayout {
                alignment: center;
                spacing: 10px;

                VerticalLayout {
                    spacing: 10px;

                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.oscillator1-heading-text;
                    }

                    osc1_selector := WaveSelector {
                        wave_shape_selected(shape) => {
                            root.wave_shape1_selected(shape);
                        }
                    }

                    Label {
                        horizontal-alignment: center;
                        font-weight: Theme.text-weight-bold;
                        label: Theme.oscillator-level-text;
                    }

                    osc1_level := LevelSlider {
                        level: Theme.osc-level-slider-default;
                        level-step: Theme.osc-level-slider-step;
                        minimum-level: Theme.osc-level-slider-minimum;
                        maximum-level: Theme.osc-level-slider-maximum;

                        level_selected(level) => {
                            root.wave_level1_selected(level / 100);
                        }
                    }

                    Label {
                        horizontal-alignment: center;
                        font-weight: Theme.text-weight-bold;
                        label: Theme.oscillator-shape-text;
                    }

                    osc1_shape := LFOSlider {
                        slider_value: Theme.wave_shaper-amount-slider-default;
                        step: Theme.wave_shaper-amount-slider-step;
                        minimum: Theme.wave_shaper-amount-slider-minimum;
                        maximum: Theme.wave_shaper-amount-slider-maximum;

                        level_selected(amount) => {
                            wave1_shaper_amount_changed(round(amount * 10.0) / 10.0);
                        }
                    }

                    Label {
                        horizontal-alignment: center;
                        font-weight: Theme.text-weight-bold;
                        label: Theme.oscillator-mod-text;
                    }

                    Label {
                        horizontal-alignment: center;
                        label: Theme.oscillator-mod-amount-text + (round(osc1_mod_amount.slider_value * 100)) + Theme.oscillator-mod-amount-suffix;
                    }

                    osc1_mod_amount := LFOSlider {
                        slider_value: Theme.osc-mod-amount-slider-default;
                        step: Theme.osc-mod-amount-slider-step;
                        minimum: Theme.osc-mod-amount-slider-minimum;
                        maximum: Theme.osc-mod-amount-slider-maximum;

                        level_selected(amount) => {
                            root.wave_mod1_amount_changed(amount);
                        }
                    }

                  Label {
                      horizontal-alignment: center;
                      label: Theme.oscillator-mod-speed-text + (round(osc1_course_speed.value) + (round(osc1_fine_speed.value*100)/100)) +
                      Theme.oscillator-mod-speed-suffix;
                  }

                  HorizontalLayout {
                      Label {
                          label: Theme.slider-course-text;
                      }
                      osc1_course_speed := LFOSlider {
                          slider_value: Theme.osc-mod-course-speed-slider-default;
                          step: self.slider_value;
                          minimum: Theme.osc-mod-course-speed-slider-minimum;
                          maximum: Theme.osc-mod-course-speed-slider-maximum;
                          level_selected(level) => {
                              wave_mod1_speed_changed (level + osc1_fine_speed.value);
                          }
                      }
                  }

                  HorizontalLayout {
                      Label {
                          label: Theme.slider-fine-text;
                      }

                      osc1_fine_speed := LFOSlider {
                          slider_value: Theme.osc-mod-fine-speed-slider-default;
                          step: self.slider_value;
                          minimum: Theme.osc-mod-fine-speed-slider-minimum;
                          maximum: Theme.osc-mod-fine-speed-slider-maximum;
                          level_selected(level) => {
                             wave_mod1_speed_changed(level + osc1_course_speed.value);
                          }
                      }

                  }
                }

                VerticalLayout {
                    spacing: 10px;

                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.oscillator2-heading-text;
                    }

                    osc2_selector := WaveSelector {
                        wave_shape_selected(shape) => {
                            root.wave_shape2_selected(shape);
                        }
                    }

                    Label {
                        horizontal-alignment: center;
                        font-weight: Theme.text-weight-bold;
                        label: Theme.oscillator-level-text;
                    }

                    osc2_level := LevelSlider {
                        level: Theme.osc-level-slider-default;
                        level-step: Theme.osc-level-slider-step;
                        minimum-level: Theme.osc-level-slider-minimum;
                        maximum-level: Theme.osc-level-slider-maximum;

                        level_selected(level) => {
                            root.wave_level2_selected(level / 100);
                        }
                    }

                    Label {
                        horizontal-alignment: center;
                        font-weight: Theme.text-weight-bold;
                        label: Theme.oscillator-shape-text;
                    }

                    osc2_shape := LFOSlider {
                        slider_value: Theme.wave_shaper-amount-slider-default;
                        step: Theme.wave_shaper-amount-slider-step;
                        minimum: Theme.wave_shaper-amount-slider-minimum;
                        maximum: Theme.wave_shaper-amount-slider-maximum;

                        level_selected(amount) => {
                            wave2_shaper_amount_changed(round(amount * 10.0) / 10.0);
                        }
                    }

                    Label {
                        horizontal-alignment: center;
                        font-weight: Theme.text-weight-bold;
                        label: Theme.oscillator-mod-text;
                    }

                    Label {
                        horizontal-alignment: center;
                        label: Theme.oscillator-mod-amount-text + (round(osc2_mod_amount.slider_value * 100)) + Theme.oscillator-mod-amount-suffix;
                    }

                    osc2_mod_amount := LFOSlider {
                        slider_value: Theme.osc-mod-amount-slider-default;
                        step: Theme.osc-mod-amount-slider-step;
                        minimum: Theme.osc-mod-amount-slider-minimum;
                        maximum: Theme.osc-mod-amount-slider-maximum;

                        level_selected(speed_hz) => {
                            root.wave_mod2_amount_changed(speed_hz);
                        }
                    }

                  Label {
                      horizontal-alignment: center;
                      label: Theme.oscillator-mod-speed-text + (round(osc2_course_speed.value) + (round(osc2_fine_speed.value*100)/100)) +
                      Theme.oscillator-mod-speed-suffix;
                  }

                  HorizontalLayout {
                      Label {
                          label: Theme.slider-course-text;
                      }
                      osc2_course_speed := LFOSlider {
                          slider_value: Theme.osc-mod-course-speed-slider-default;
                          step: self.slider_value;
                          minimum: Theme.osc-mod-course-speed-slider-minimum;
                          maximum: Theme.osc-mod-course-speed-slider-maximum;
                          level_selected(level) => {
                              wave_mod2_speed_changed (level + osc2_fine_speed.value);
                          }
                      }
                  }

                  HorizontalLayout {
                      Label {
                          label: Theme.slider-fine-text;
                      }

                      osc2_fine_speed := LFOSlider {
                          slider_value: Theme.osc-mod-fine-speed-slider-default;
                          step: self.slider_value;
                          minimum: Theme.osc-mod-fine-speed-slider-minimum;
                          maximum: Theme.osc-mod-fine-speed-slider-maximum;
                          level_selected(level) => {
                             wave_mod2_speed_changed(level + osc2_course_speed.value);
                          }
                      }

                  }
                }

                VerticalLayout {
                    spacing: 10px;

                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.oscillator3-heading-text;
                    }

                    osc3_selector := WaveSelector {
                        wave_shape_selected(shape) => {
                            root.wave_shape3_selected(shape);
                        }
                    }

                    Label {
                        horizontal-alignment: center;
                        font-weight: Theme.text-weight-bold;
                        label: Theme.oscillator-level-text;
                    }

                    osc3_level := LevelSlider {
                        level: Theme.osc-level-slider-default;
                        level-step: Theme.osc-level-slider-step;
                        minimum-level: Theme.osc-level-slider-minimum;
                        maximum-level: Theme.osc-level-slider-maximum;

                        level_selected(level) => {
                            root.wave_level3_selected(level / 100);
                        }
                    }

                    Label {
                        horizontal-alignment: center;
                        font-weight: Theme.text-weight-bold;
                        label: Theme.oscillator-shape-text;
                    }

                    osc3_shape := LFOSlider {
                        slider_value: Theme.wave_shaper-amount-slider-default;
                        step: Theme.wave_shaper-amount-slider-step;
                        minimum: Theme.wave_shaper-amount-slider-minimum;
                        maximum: Theme.wave_shaper-amount-slider-maximum;

                        level_selected(amount) => {
                            wave3_shaper_amount_changed(round(amount * 10.0) / 10.0);
                        }
                    }

                    Label {
                        horizontal-alignment: center;
                        font-weight: Theme.text-weight-bold;
                        label: Theme.oscillator-mod-text;
                    }

                    Label {
                        horizontal-alignment: center;
                        label: Theme.oscillator-mod-amount-text + (round(osc3_mod_amount.slider_value * 100)) + Theme.oscillator-mod-amount-suffix;
                    }

                    osc3_mod_amount := LFOSlider {
                        slider_value: Theme.osc-mod-amount-slider-default;
                        step: Theme.osc-mod-amount-slider-step;
                        minimum: Theme.osc-mod-amount-slider-minimum;
                        maximum: Theme.osc-mod-amount-slider-maximum;

                        level_selected(speed_hz) => {
                            root.wave_mod3_amount_changed(speed_hz);
                        }
                    }


                  Label {
                      horizontal-alignment: center;
                      label: Theme.oscillator-mod-speed-text + (round(osc3_course_speed.value) + (round(osc3_fine_speed.value*100)/100)) +
                      Theme.oscillator-mod-speed-suffix;
                  }

                  HorizontalLayout {
                      Label {
                          label: Theme.slider-course-text;
                      }
                      osc3_course_speed := LFOSlider {
                          slider_value: Theme.osc-mod-course-speed-slider-default;
                          step: self.slider_value;
                          minimum: Theme.osc-mod-course-speed-slider-minimum;
                          maximum: Theme.osc-mod-course-speed-slider-maximum;
                          level_selected(level) => {
                              wave_mod3_speed_changed (level + osc3_fine_speed.value);
                          }
                      }
                  }

                  HorizontalLayout {
                      Label {
                          label: Theme.slider-fine-text;
                      }

                      osc3_fine_speed := LFOSlider {
                          slider_value: Theme.osc-mod-fine-speed-slider-default;
                          step: self.slider_value;
                          minimum: Theme.osc-mod-fine-speed-slider-minimum;
                          maximum: Theme.osc-mod-fine-speed-slider-maximum;
                          level_selected(level) => {
                             wave_mod3_speed_changed(level + osc3_course_speed.value);
                          }
                      }

                  }
                }

                VerticalLayout {
                    spacing: 10px;

                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.sub-oscillator-heading-text;
                    }

                    sub_selector := WaveSelector {
                        wave_shape_selected(shape) => {
                            root.sub_shape_selected(shape);
                        }
                    }

                    Label {
                        horizontal-alignment: center;
                        font-weight: Theme.text-weight-bold;
                        label: Theme.oscillator-level-text;
                    }

                    sub_level := LevelSlider {
                        level: Theme.sub-level-slider-default;
                        level-step: Theme.osc-level-slider-step;
                        minimum-level: Theme.osc-level-slider-minimum;
                        maximum-level: Theme.osc-level-slider-maximum;

                        level_selected(level) => {
                            root.sub_level_selected(level / 100);
                        }
                    }

                    Label {
                        horizontal-alignment: center;
                        font-weight: Theme.text-weight-bold;
                        label: Theme.oscillator-shape-text;
                    }

                    sub_shape := LFOSlider {
                        slider_value: Theme.wave_shaper-amount-slider-default;
                        step: Theme.wave_shaper-amount-slider-step;
                        minimum: Theme.wave_shaper-amount-slider-minimum;
                        maximum: Theme.wave_shaper-amount-slider-maximum;

                        level_selected(amount) => {
                            sub_shaper_amount_changed(round(amount * 10.0) / 10.0);
                        }
                    }

                    Label {
                        horizontal-alignment: center;
                        font-weight: Theme.text-weight-bold;
                        label: Theme.oscillator-mod-text;
                    }

                    Label {
                        horizontal-alignment: center;
                        label: Theme.oscillator-mod-amount-text + (round(sub_mod_amount.slider_value * 100)) + Theme.oscillator-mod-amount-suffix;
                    }

                    sub_mod_amount := LFOSlider {
                        slider_value: Theme.osc-mod-amount-slider-default;
                        step: Theme.osc-mod-amount-slider-step;
                        minimum: Theme.osc-mod-amount-slider-minimum;
                        maximum: Theme.osc-mod-amount-slider-maximum;

                        level_selected(speed_hz) => {
                            root.sub_mod_amount_changed(speed_hz);
                        }
                    }

                  Label {
                      horizontal-alignment: center;
                      label: Theme.oscillator-mod-speed-text + (round(sub_course_speed.value) + (round(sub_fine_speed.value*100)/100)) +
                      Theme.oscillator-mod-speed-suffix;
                  }

                  HorizontalLayout {
                      Label {
                          label: Theme.slider-course-text;
                      }
                      sub_course_speed := LFOSlider {
                          slider_value: Theme.osc-mod-course-speed-slider-default;
                          step: self.slider_value;
                          minimum: Theme.osc-mod-course-speed-slider-minimum;
                          maximum: Theme.osc-mod-course-speed-slider-maximum;
                          level_selected(level) => {
                              sub_mod_speed_changed(level + osc2_fine_speed.value);
                          }
                      }
                  }

                  HorizontalLayout {
                      Label {
                          label: Theme.slider-fine-text;
                      }

                      sub_fine_speed := LFOSlider {
                          slider_value: Theme.osc-mod-fine-speed-slider-default;
                          step: self.slider_value;
                          minimum: Theme.osc-mod-fine-speed-slider-minimum;
                          maximum: Theme.osc-mod-fine-speed-slider-maximum;
                          level_selected(level) => {
                             sub_mod_speed_changed(level + sub_course_speed.value);
                          }
                      }

                  }
                }
            }

            HorizontalLayout {
                alignment: center;
                spacing: 10px;

                VerticalLayout {
                    spacing: 10px;

                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.detune-heading-text;
                    }

                    Label {
                        horizontal-alignment: center;
                        label: round(detune_amount.value) + Theme.detune-amount-label-suffix;
                    }

                    detune_amount := LevelSlider {
                        level: Theme.detune-amount-slider-default;
                        level-step: Theme.osc-level-slider-step;
                        minimum-level: Theme.osc-level-slider-minimum;
                        maximum-level: Theme.osc-level-slider-maximum;
                        enabled: false;
                        level_selected(level) => {
                            wave_detune_value_changed(level / 100);
                        }
                    }

                    ActivationSwitch {
                        activated-text: Theme.activation-switch-active-text;
                        not-activated-text: Theme.activation-switch-not-active-text;

                        activation_toggled => {
                            detune_amount.enabled = self.activated;
                            wave_detune_state_changed(self.activated, round(detune_amount.level) / 100);
                        }
                    }
                }

                VerticalLayout {
                    spacing: 10px;

                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.output-level-heading-text;
                    }

                    Label {
                        horizontal-alignment: center;
                        label: round(output_level.value) - 100 + Theme.output-level-label-suffix;
                    }

                    output_level := LevelSlider {
                        level: Theme.output-level-slider-default;
                        level-step: Theme.output-level-slider-step;
                        minimum-level: Theme.output-level-slider-minimum;
                        maximum-level: Theme.output-level-slider-maximum;
                        level_selected(level) => {
                            root.output_level_value_changed(level - 100);
                        }
                    }

                    output_level_constant := ActivationSwitch {
                        activated-text: Theme.output-level-constant-active-text;
                        not-activated-text: Theme.output-level-constant-not-active-text;
                        checked: true;

                        activation_toggled => {
                            root.output_level_constant_activated(self.checked);
                        }
                    }
                }
            }
        }
    }
}
