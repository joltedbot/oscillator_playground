import { Panel, Heading, Label, LevelSlider, LFOSlider, OscilatorControls, WaveSelector, ActivationSwitch, StartButton, ActionButton } from "../ui/components.slint";
import { Theme } from "../ui/theme.slint";







export component OscillatorPanel inherits HorizontalLayout {

    callback wave1_level_selected(float);
    callback wave1_shape_selected(string);
    callback wave2_level_selected(float);
    callback wave2_shape_selected(string);
    callback wave3_level_selected(float);
    callback wave3_shape_selected(string);
    callback sub_level_selected(float);
    callback sub_shape_selected(string);
    callback wave1_tuning_changed(int);
    callback wave2_tuning_changed(int);
    callback wave3_tuning_changed(int);
    callback sub_tuning_changed(int);
    callback wave1_shaper_amount_changed(float);
    callback wave2_shaper_amount_changed(float);
    callback wave3_shaper_amount_changed(float);
    callback sub_shaper_amount_changed(float);
    callback wave1_mod_speed_changed(float);
    callback wave2_mod_speed_changed(float);
    callback wave3_mod_speed_changed(float);
    callback sub_mod_speed_changed(float);
    callback wave1_mod_amount_changed(float);
    callback wave2_mod_amount_changed(float);
    callback wave3_mod_amount_changed(float);
    callback sub_mod_amount_changed(float);
    callback wave_detune_value_changed(float);
    callback wave_detune_state_changed(bool, float);
    callback output_level_value_changed(int);
    callback output_level_constant_activated(bool);

    Panel {
        width: Theme.oscillator-panel-width;

        VerticalLayout {
            alignment: center;
            spacing: 10px;
            padding: 20px;

            HorizontalLayout {
                alignment: center;
                spacing: 10px;


                osc1 := OscilatorControls  {
                
                        heading: Theme.oscillator1-heading-text;
                        
                        wave_shape_selected(shape) => {
                            root.wave1_shape_selected(shape);
                        }

                        wave_tuning_changed(interval) => {
                            root.wave1_tuning_changed(interval);
                        }
                        
                        wave_level_selected(level) => {
                            root.wave1_level_selected(level);
                        }
                        
                        wave_shaper_amount_changed(amount) => {
                            root.wave1_shaper_amount_changed(amount);
                        }
                        
                        wave_mod_amount_changed(amount) => {
                            root.wave1_mod_amount_changed(amount);
                        }
                        
                        wave_mod_speed_changed(speed_hz) => {
                            root.wave1_mod_speed_changed(speed_hz);
                        }
                }

                osc2 := OscilatorControls  {
                
                        heading: Theme.oscillator2-heading-text;
                        
                        wave_shape_selected(shape) => {
                            root.wave2_shape_selected(shape);
                        }

                        wave_tuning_changed(interval) => {
                            root.wave2_tuning_changed(interval);
                        }
                        
                        wave_level_selected(level) => {
                            root.wave2_level_selected(level);
                        }
                        
                        wave_shaper_amount_changed(amount) => {
                            root.wave2_shaper_amount_changed(amount);
                        }
                        
                        wave_mod_amount_changed(amount) => {
                            root.wave2_mod_amount_changed(amount);
                        }
                        
                        wave_mod_speed_changed(speed_hz) => {
                            root.wave2_mod_speed_changed(speed_hz);
                        }
                }

                osc3 := OscilatorControls  {
                
                        heading: Theme.oscillator3-heading-text;
                        
                        wave_shape_selected(shape) => {
                            root.wave3_shape_selected(shape);
                        }

                        wave_tuning_changed(interval) => {
                            root.wave3_tuning_changed(interval);
                        }

                        wave_level_selected(level) => {
                            root.wave3_level_selected(level);
                        }
                        
                        wave_shaper_amount_changed(amount) => {
                            root.wave3_shaper_amount_changed(amount);
                        }
                        
                        wave_mod_amount_changed(amount) => {
                            root.wave3_mod_amount_changed(amount);
                        }
                        
                        wave_mod_speed_changed(speed_hz) => {
                            root.wave3_mod_speed_changed(speed_hz);
                        }
                }
                
                sub := OscilatorControls  {
                                
                        heading: Theme.sub-oscillator-heading-text;
                        is_sub: true;

                        wave_shape_selected(shape) => {
                            root.sub_shape_selected(shape);
                        }

                        wave_tuning_changed(interval) => {
                            root.sub_tuning_changed(interval);
                        }

                        wave_level_selected(level) => {
                            root.sub_level_selected(level);
                        }
                        
                        wave_shaper_amount_changed(amount) => {
                            root.sub_shaper_amount_changed(amount);
                        }
                        
                        wave_mod_amount_changed(amount) => {
                            root.sub_mod_amount_changed(amount);
                        }
                        
                        wave_mod_speed_changed(speed_hz) => {
                            root.sub_mod_speed_changed(speed_hz);
                        }
                }              

            }

            HorizontalLayout {
                alignment: center;
                spacing: 10px;

                VerticalLayout {
                    spacing: 10px;

                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.detune-heading-text;
                    }


                    ActivationSwitch {
                        activated-text: Theme.activation-switch-active-text;
                        not-activated-text: Theme.activation-switch-not-active-text;

                        activation_toggled => {
                            detune_amount.enabled = self.activated;
                            wave_detune_state_changed(self.activated, round(detune_amount.level) / 100);
                        }
                    }

                    Label {
                        horizontal-alignment: center;
                        label: round(detune_amount.value) + Theme.detune-amount-label-suffix;
                    }

                    detune_amount := LevelSlider {
                        level: Theme.detune-amount-slider-default;
                        level-step: Theme.osc-level-slider-step;
                        minimum-level: Theme.osc-level-slider-minimum;
                        maximum-level: Theme.osc-level-slider-maximum;
                        enabled: false;
                        level_selected(level) => {
                            wave_detune_value_changed(level / 100);
                        }
                    }

                }

                VerticalLayout {
                    spacing: 10px;

                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.output-level-heading-text;
                    }

                    output_level_constant := ActivationSwitch {
                        activated-text: Theme.output-level-constant-active-text;
                        not-activated-text: Theme.output-level-constant-not-active-text;
                        checked: true;

                        activation_toggled => {
                            root.output_level_constant_activated(self.checked);
                        }
                    }

                    Label {
                        horizontal-alignment: center;
                        label: round(output_level.value) - 100 + Theme.output-level-label-suffix;
                    }

                    output_level := LevelSlider {
                        level: Theme.output-level-slider-default;
                        level-step: Theme.output-level-slider-step;
                        minimum-level: Theme.output-level-slider-minimum;
                        maximum-level: Theme.output-level-slider-maximum;
                        level_selected(level) => {
                            root.output_level_value_changed(level - 100);
                        }
                    }


                }
            }
        }
    }
}
