import { Panel, Heading, Label, LevelSlider, VerticalSpacer, LFOSlider, OscilatorControls, WaveSelector, ActivationSwitch, StartButton,
ActionButton, VerticalLabeledIntSlider, VerticalLabeledFloatSlider } from "../ui/components.slint";
import { TabWidget, Spinner } from "std-widgets.slint";
import { Theme } from "../ui/theme.slint";


export component OscillatorPanel inherits HorizontalLayout {

    in-out property <bool> arp_button_active: false;

    callback wave_level_selected(float, int);
    callback wave_specific_parameters_selected(float, float, int);
    callback wave_am_amount_selected(int, int);
    callback wave_shape_selected(string, int);
    callback wave_tuning_changed(int, int);
    callback wave_shaper_amount_changed(float, int);
    callback wave_mod_speed_changed(float, int);
    callback wave_mod_amount_changed(float, int);
    callback wave_detune_value_changed(float);
    callback wave_detune_state_changed(bool, float);
    callback output_level_value_changed(int);
    callback output_level_constant_activated(bool);
    callback output_pan_value_changed(float);

    callback arp_button_pressed(bool);
    callback resync_oscillators();
    callback resync_oscillator_lfos();

    VerticalLayout {
        alignment: start;
        spacing: 5px;

        osc1_panel := Panel {
            panel-width: Theme.oscillators-panel-width;
            panel-height: Theme.oscillators-panel-height;

            osc1 := OscilatorControls {
                oscillator_number: 1;
                heading: Theme.oscillator1-heading-text;

                wave_level_selected(level, oscillator) => {
                    root.wave_level_selected(level, oscillator);
                }
                wave_specific_parameters_selected(parameter1, parameter2, oscillator) => {
                    root.wave_specific_parameters_selected(parameter1, parameter2, oscillator);
                }
                wave_shape_selected(shape, oscillator) => {
                    root.wave_shape_selected(shape, oscillator);
                }
                wave_tuning_changed(interval, oscillator) => {
                    root.wave_tuning_changed(interval, oscillator);
                }
                wave_shaper_amount_changed(amount, oscillator) => {
                    root.wave_shaper_amount_changed(amount, oscillator);
                }
                wave_mod_amount_changed(amount, oscillator) => {
                    root.wave_mod_amount_changed(amount, oscillator);
                }
                wave_mod_speed_changed(speed_hz, oscillator) => {
                    root.wave_mod_speed_changed(speed_hz, oscillator);
                }
            }
        }

        osc2_panel := Panel {
            panel-width: Theme.oscillators-panel-width;
            panel-height: Theme.oscillators-panel-height;

            osc2 := OscilatorControls {
                oscillator_number: 2;
                heading: Theme.oscillator2-heading-text;

                wave_level_selected(level, oscillator) => {
                    root.wave_level_selected(level, oscillator);
                }
                wave_specific_parameters_selected(parameter1, parameter2, oscillator) => {
                    root.wave_specific_parameters_selected(parameter1, parameter2, oscillator);
                }
                wave_shape_selected(shape, oscillator) => {
                    root.wave_shape_selected(shape, oscillator);
                }
                wave_tuning_changed(interval, oscillator) => {
                    root.wave_tuning_changed(interval, oscillator);
                }
                wave_shaper_amount_changed(amount, oscillator) => {
                    root.wave_shaper_amount_changed(amount, oscillator);
                }
                wave_mod_amount_changed(amount, oscillator) => {
                    root.wave_mod_amount_changed(amount, oscillator);
                }
                wave_mod_speed_changed(speed_hz, oscillator) => {
                    root.wave_mod_speed_changed(speed_hz, oscillator);
                }
            }
        }

        osc3_panel := Panel {
            panel-width: Theme.oscillators-panel-width;
            panel-height: Theme.oscillators-panel-height;

            osc3 := OscilatorControls {
                oscillator_number: 3;
                heading: Theme.oscillator3-heading-text;

                wave_level_selected(level, oscillator) => {
                    root.wave_level_selected(level, oscillator);
                }
                wave_specific_parameters_selected(parameter1, parameter2, oscillator) => {
                    root.wave_specific_parameters_selected(parameter1, parameter2, oscillator);
                }
                wave_shape_selected(shape, oscillator) => {
                    root.wave_shape_selected(shape, oscillator);
                }
                wave_tuning_changed(interval, oscillator) => {
                    root.wave_tuning_changed(interval, oscillator);
                }
                wave_shaper_amount_changed(amount, oscillator) => {
                    root.wave_shaper_amount_changed(amount, oscillator);
                }
                wave_mod_amount_changed(amount, oscillator) => {
                    root.wave_mod_amount_changed(amount, oscillator);
                }
                wave_mod_speed_changed(speed_hz, oscillator) => {
                    root.wave_mod_speed_changed(speed_hz, oscillator);
                }
            }
        }

        sub_panel := Panel {
            panel-width: Theme.oscillators-panel-width;
            panel-height: Theme.oscillators-panel-height;

            sub := OscilatorControls {
                is_sub: true;
                oscillator_number: 0;
                heading: Theme.sub_oscillator-heading-text;

                wave_level_selected(level, oscillator) => {
                    root.wave_level_selected(level, oscillator);
                }
                wave_specific_parameters_selected(parameter1, parameter2, oscillator) => {
                    root.wave_specific_parameters_selected(parameter1, parameter2, oscillator);
                }
                wave_shape_selected(shape, oscillator) => {
                    root.wave_shape_selected(shape, oscillator);
                }
                wave_tuning_changed(interval, oscillator) => {
                    root.wave_tuning_changed(interval, oscillator);
                }
                wave_shaper_amount_changed(amount, oscillator) => {
                    root.wave_shaper_amount_changed(amount, oscillator);
                }
                wave_mod_amount_changed(amount, oscillator) => {
                    root.wave_mod_amount_changed(amount, oscillator);
                }
                wave_mod_speed_changed(speed_hz, oscillator) => {
                    root.wave_mod_speed_changed(speed_hz, oscillator);
                }
            }
        }

        global_panel := Panel {

            width: Theme.oscillators-global-panel-width;
            height: Theme.oscillators-global-panel-height;

            HorizontalLayout {
                alignment: space-between;
                spacing: 10px;
                padding: 10px;

                VerticalLayout{}

                VerticalLayout {
                    spacing: 10px;

                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.detune-heading-text;
                    }

                    ActivationSwitch {
                        activated-text: Theme.activation-switch-active-text;
                        not-activated-text: Theme.activation-switch-not-active-text;

                        activation_toggled => {
                            detune_amount.is_enabled = self.activated;
                            wave_detune_state_changed(self.activated, round(detune_amount.slider_value) / 100);
                        }
                    }

                    detune_amount := VerticalLabeledFloatSlider {
                        is_enabled: false;
                        slider_height: Theme.vertical-slider-height;
                        label: round(detune_amount.slider_value*10)/10 + Theme.detune-amount-label-suffix;
                        slider_value: Theme.detune-amount-slider-default;
                        is_bold: true;
                        step: Theme.detune-slider-step;
                        minimum: Theme.detune-slider-minimum;
                        maximum: Theme.detune-slider-maximum;

                        new_value_selected(amount) => {
                            wave_detune_value_changed(amount / 100);
                        }
                    }
                }

                VerticalSpacer {
                    line-height: 100px;
                }

                VerticalLayout {
                    spacing: 10px;

                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.output-level-heading-text;
                    }

                    output_level_constant := ActivationSwitch {
                        activated-text: Theme.output-level-constant-active-text;
                        not-activated-text: Theme.output-level-constant-not-active-text;
                        checked: true;

                        activation_toggled => {
                            root.output_level_constant_activated(self.checked);
                        }
                    }

                    output_level := VerticalLabeledIntSlider {
                        label: round(output_level.slider_value) - 100 + Theme.output-level-label-suffix;
                        slider_value: Theme.output-level-slider-default;
                        is_bold: true;
                        step: Theme.output-level-slider-step;
                        minimum: Theme.output-level-slider-minimum;
                        maximum: Theme.output-level-slider-maximum;

                        new_value_selected(level) => {
                            root.output_level_value_changed(level - 100);
                        }
                    }
                }

                VerticalSpacer {
                    line-height: 100px;
                }

                VerticalLayout {
                    spacing: 10px;
                    alignment: start;

                    Heading {
                        horizontal-alignment: center;
                        heading: Theme.output-pan-heading-text;
                    }

                    HorizontalLayout {
                        Label {
                            label: Theme.output-pan-slider-left;
                        }

                        output_pan := VerticalLabeledFloatSlider {
                            double_click_value: Theme.output-pan-slider-default;
                            label: round(abs(output_pan.slider_value - 1) * 50);
                            slider_value: Theme.output-pan-slider-default;
                            is_bold: true;
                            step: Theme.output-pan-slider-step;
                            minimum: Theme.output-pan-slider-minimum;
                            maximum: Theme.output-pan-slider-maximum;

                            new_value_selected(pan) => {
                                root.output_pan_value_changed(round(pan * 100)/100);
                            }
                        }

                        Label {
                            label: Theme.output-pan-slider-right;
                        }
                    }
                }


                VerticalSpacer {
                    line-height: 100px;
                }

                VerticalLayout {
                    spacing: 10px;
                    padding: 10px;
                    alignment: center;

                    arp_button := StartButton {
                        active: arp_button_active;
                        start_button_pressed(active) => {
                            root.arp_button_pressed(active);
                            arp-spinner.visible = active;
                        }
                    }

                    arp-spinner := Spinner {
                        visible: false;
                        indeterminate: true;
                    }
                }
                VerticalSpacer {
                    line-height: 100px;
                }
                VerticalLayout {
                        spacing: 10px;
                        padding: 10px;
                        alignment: center;

                        reset_button := ActionButton {
                            text: Theme.resync-button-text;
                            width: Theme.resync-button-width;
                            height: Theme.resync-button-height;

                            take_action() => {
                                root.resync_oscillators();
                            }
                        }

                        lfo_reset_button := ActionButton {
                            text: Theme.resync-lfo-button-text;
                            width: Theme.resync-button-width;
                            height: Theme.resync-button-height;

                            take_action() => {
                                root.resync_oscillator_lfos();
                            }
                        }
                    }

                VerticalLayout {}

            }
        }
    }
}
